#file: noinspection UndefinedAction
name: Deploy ETL Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'terraform/**'
      - 'fund_lens_etl/**'
      - 'scripts/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_USE_OIDC: true

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    outputs:
      resource_group_name: ${{ steps.tf-outputs.outputs.resource_group_name }}
      vm_name: ${{ steps.tf-outputs.outputs.vm_name }}
      admin_username: ${{ steps.tf-outputs.outputs.admin_username }}
      postgres_fqdn: ${{ steps.tf-outputs.outputs.postgres_fqdn }}
      database_name: ${{ steps.tf-outputs.outputs.database_name }}
      database_username: ${{ steps.tf-outputs.outputs.database_username }}
    defaults:
      run:
        working-directory: ./terraform
    env:
      TF_BACKEND_resource_group_name: ${{ secrets.TF_STATE_RESOURCE_GROUP }}
      TF_BACKEND_storage_account_name: ${{ secrets.TF_STATE_STORAGE_ACCOUNT }}
      TF_BACKEND_container_name: ${{ secrets.TF_STATE_CONTAINER }}
      TF_BACKEND_key: ${{ secrets.TF_BACKEND_KEY }}
      TF_VAR_shared_state_resource_group_name: ${{ secrets.TF_STATE_RESOURCE_GROUP }}
      TF_VAR_shared_state_storage_account_name: ${{ secrets.TF_STATE_STORAGE_ACCOUNT }}
      TF_VAR_shared_state_container_name: ${{ secrets.TF_STATE_CONTAINER }}
      TF_VAR_shared_state_key: ${{ secrets.TF_VAR_SHARED_STATE_KEY }}
      TF_VAR_allowed_ssh_ips: ${{ secrets.TF_VAR_ALLOWED_SSH_IPS }}
      TF_VAR_ssh_public_key: ${{ secrets.TF_VAR_SSH_PUBLIC_KEY }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=$TF_BACKEND_resource_group_name" \
            -backend-config="storage_account_name=$TF_BACKEND_storage_account_name" \
            -backend-config="container_name=$TF_BACKEND_container_name" \
            -backend-config="key=$TF_BACKEND_key"

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false

      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "vm_name=$(terraform output -raw vm_name)" >> $GITHUB_OUTPUT
          echo "admin_username=$(terraform output -raw admin_username)" >> $GITHUB_OUTPUT
          echo "postgres_fqdn=$(terraform output -raw postgres_fqdn)" >> $GITHUB_OUTPUT
          echo "database_name=$(terraform output -raw database_name)" >> $GITHUB_OUTPUT
          echo "database_username=$(terraform output -raw database_username)" >> $GITHUB_OUTPUT

  deploy-prefect:
    name: Deploy Prefect Flows
    runs-on: ubuntu-latest
    needs: terraform
    env:
      FEC_API_KEY: ${{ secrets.FEC_API_KEY }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      GITHUB_REPO: ${{ github.repository }}
      VM_NAME: ${{ needs.terraform.outputs.vm_name }}
      RESOURCE_GROUP_NAME: ${{ needs.terraform.outputs.resource_group_name }}
      ADMIN_USERNAME: ${{ needs.terraform.outputs.admin_username }}
      POSTGRES_FQDN: ${{ needs.terraform.outputs.postgres_fqdn }}
      DATABASE_NAME: ${{ needs.terraform.outputs.database_name }}
      DATABASE_USERNAME: ${{ needs.terraform.outputs.database_username }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Deploy to VM
        env:
          POSTGRES_ADMIN_USER: ${{ secrets.POSTGRES_ADMIN_USERNAME }}
          POSTGRES_ADMIN_PASSWORD: ${{ secrets.POSTGRES_ADMIN_PASSWORD }}
        run: |
          # Construct DATABASE_URL from Terraform outputs
          DATABASE_URL="postgresql://${{ env.DATABASE_USERNAME }}:${{ env.DB_PASSWORD }}@${{ env.POSTGRES_FQDN }}:5432/${{ env.DATABASE_NAME }}"

          # Execute deployment script on VM using Azure Run Command
          echo "Executing deployment on VM via Azure Run Command..."
          echo "VM: ${{ env.VM_NAME }}"
          echo "Resource Group: ${{ env.RESOURCE_GROUP_NAME }}"
          echo "User: ${{ env.ADMIN_USERNAME }}"
          echo "Database: ${{ env.DATABASE_NAME }}"

          az vm run-command invoke \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name ${{ env.VM_NAME }} \
            --command-id RunShellScript \
            --scripts @scripts/deploy-vm.sh \
            --parameters \
              "DATABASE_URL=$DATABASE_URL" \
              "FEC_API_KEY=${{ env.FEC_API_KEY }}" \
              "GITHUB_REPO=${{ env.GITHUB_REPO }}" \
              "VM_USER=${{ env.ADMIN_USERNAME }}" \
              "POSTGRES_HOST=${{ env.POSTGRES_FQDN }}" \
              "POSTGRES_ADMIN_USER=$POSTGRES_ADMIN_USER" \
              "POSTGRES_ADMIN_PASSWORD=$POSTGRES_ADMIN_PASSWORD" \
              "DATABASE_NAME=${{ env.DATABASE_NAME }}" \
              "DB_USERNAME=${{ env.DATABASE_USERNAME }}" \
              "DB_PASSWORD=${{ env.DB_PASSWORD }}"
